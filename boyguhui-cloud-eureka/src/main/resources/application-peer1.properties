spring.application.name=eureka-server
server.port=8081
eureka.instance.hostname=peerl 
eureka.client.serviceUrl.defaultZone=http://peer2:8082/eureka,http://peer3:8083/eureka
#表示是否将自己注册到Eureka Server，默认为true。
eureka.client.register-with-eureka=true
#表示是否从Eureka Server获取注册信息，默认为true。单节点不需要从eureka server获取注册消息，多节点（集群）设置为获取
eureka.client.fetch-registry=true
#显示ip注册
#eureka.instance.preferIpAddress=true
#eureka.instance.prefer-ip-address=true
#eureka.instance.instance-id=${spring.cloud.client.ip-address}:${server.port}
#-------------------------------------------------------------------
#由于Eureka拥有自我保护机制，当其注册表里服务因为网络或其他原因出现故障而关停时，Eureka不会剔除服务注册，而是等待其修复。这是AP的一种实现。 为了让其有精准的 CP健康检查，可以采取让其剔除不健康节点。
#server端:
#eureka.server.enable-self-preservation//（设为false，关闭自我保护主要）
#eureka.server.eviction-interval-timer-in-ms//清理间隔（单位毫秒，默认是60*1000）
#client端：
#eureka.client.healthcheck.enabled = true//开启健康检查（需要spring-boot-starter-actuator依赖）
#eureka.instance.lease-renewal-interval-in-seconds =10//租期更新时间间隔（默认30秒）
#eureka.instance.lease-expiration-duration-in-seconds =30//租期到期时间（默认90秒）
#将自己注册到eureka注册中心，单节点关闭
#eureka.client.registerWithEureka=true
#从注册中心获取注册信息，单节点关闭
#eureka.client.fetchRegistry=true
#从注册中心获取注册信息的时间间隔
#eureka.client.registryFetchIntervalSeconds=10
#非安全通信端口
#eureka.instance.nonSecurePort=80
#是否启用非安全端口接受请求
#eureka.instance.nonSecurePortEnabled=true
#安全通信端口
#eureka.instance.securePort=443
#是否启用安全端口接受请求
#eureka.instance.securePortEnabled=true
#是否优先使用IP地址作为主机名的标识，默认false
#eureka.instance.preferIpAddress=false
#eureka节点定时续约时间，默认30
#eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka节点剔除时间，默认90
#eureka.instance.leaseExpirationDurationInSeconds=45
#eureka.client.eureka-server-connect-timeout-seconds=15
#eureka.client.eureka-server-read-timeout-seconds=10
#eureka.instance.instance-id=${spring.cloud.client.ipAddress}:ribbon-service-provider-peer:${server.port}

